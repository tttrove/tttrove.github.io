[{"title":"Hexo博客搭建与个性化定制指南","path":"//blog/202405/Hexo踩坑笔记/","content":"1.什么是 Hexo？Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 2.为什么使用Hexo？完全免费；静态站点，轻量快速；可按需求自由定制改造；托管在 GitHub，安全省心；迁移方便。 3.部署准备工作3.1.安装依赖 Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本) Git 如果您的电脑中已经安装上述必备程序，那么恭喜您！你可以直接前往下一步骤。 如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。 3.1.1.安装 Git前往git官网下载并安装。但本人实测了官网下载速度实在太慢，推荐使用镜像下载站下载山东大学镜像下载站，感谢山东大学。 3.1.2.安装 Node.js前往Node.js官网下载并安装。附送淘宝 Node.js 镜像下载链接。 另外如果不想因为npm安装让C盘变红最好跟着下面这篇博客设置一下【node_global】和【node_cache】的环境变量。Node.js下载安装及环境配置教程【超详细】_nodejs下载-CSDN博客 3.2.创建 Github Pages 仓库连接 Github 使用邮箱注册 GitHub 账户，选择免费账户（Free），并完成邮件验证。 右键 -&gt; Git Bash Here，设置用户名和邮箱： 12git config --global user.name &quot;GitHub 用户名&quot;git config --global user.email &quot;GitHub 邮箱&quot; 创建 SSH 密匙： 输入 ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;，然后一路回车。 添加密匙： 进入 [C:\\Users\\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。 登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。 Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。 验证连接： 打开 Git Bash，输入 ssh -T git@github.com ，显示 “Hi xxx! You’ve successfully……” 即连接成功。 GitHub 主页右上角加号 -&gt; New repository： Repository name 中输入 用户名.github.io 勾选 “Initialize this repository with a README” Description 选填 填好后点击 Create repository 创建。 4.部署 Hexo 到 GitHub Pages所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。 1$ npm install -g hexo-cli 安装以后，可以使用以下两种方式执行 Hexo： npx hexo &lt;command&gt; Linux 用户可以将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 hexo &lt;command&gt;： 1echo &#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27; &gt;&gt; ~/.profile 新建hexo工作目录MyBlogCode，右击打开git bash，初始化运行Hexo 123cd E:\\MyBlogCodehexo init # 初始化npm install # 安装组件 完成后依次输入下面命令，启动本地服务器进行预览： 12hexo g # 生成页面hexo s # 启动预览 访问 http://localhost:4000，出现 Hexo 默认页面，本地博客安装成功！ Tips：如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 hexo server -p 5000 更改端口号后重试。 本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。 首先安装 hexo-deployer-git： 1npm install hexo-deployer-git --save 然后修改 _config.yml 文件末尾的 Deployment 部分，修改成如下： 1234deploy: type: git repository: git@github.com:用户名/用户名.github.io.git branch: main 完成后运行 hexo d 将网站上传部署到 GitHub Pages。 完成！这时访问我们的 GitHub 域名 https://用户名.github.io 就可以看到 Hexo 网站了。 5.绑定域名博客搭建完成使用的是 GitHub 的子域名（&quot;GitHub 用户名&quot;.github.io），我们可以为 Hexo 博客绑定自己的域名替换 GitHub 域名，更加个性化和专业，也利于SEO。 用Cloudflare添加我们需要托管的域名，网站–域名–DNS–添加记录，类型我们选择CNAME,主机名我直接填的是@，目标填写&quot;GitHub 用户名&quot;.github.io，同时让Cloudflare帮我们代理一下，自动加上Cloudflare Origin CA 证书认证。 回到github pages的项目地址，进入Settings-Pages-Custom domain，填写域名，点击save，静静等待DNS验证。此时你会发现在项目根目录下多出来一个名为CNAME的文件，里面填写了你的域名，且文件没有后缀。 DNS验证通过后就可以使用自己的域名访问 Hexo 博客了。 6.开始使用进入博客所在目录，右键打开 Git Bash Here，创建博文： 1hexo new &quot;My New Post&quot; 然后 source_posts 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。 写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。 1hexo g -d # 生成页面并部署发布 也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 hexo g 和 hexo d 发布。 12345678910111213---title: Hello World # 标题date: 2019/3/26 hh:mm:ss # 时间categories: # 分类- Diarytags: # 标签- PS3- Games---摘要&lt;!--more--&gt;正文 7.网站设置包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考官方文档按需要编辑。 注意：冒号后要加一个空格！ 8.更换主题在 Themes | Hexo 选择一个喜欢的主题，比如 Stellar，进入博客目录打开 Git Bash Here 下载主题： 8.1.安装方法 打开终端并进入博客文件夹，执行：1npm i hexo-theme-stellar 在 MyBlogCode/_config.yml 文件中找到并修改： 1theme: stellar 8.2.更新方法 打开终端并进入博客文件夹，执行： 1npm i hexo-theme-stellar 阅读 更新日志 进行迁移操作。 9.常用命令12345678hexo new &quot;name&quot; # 新建文章hexo new page &quot;name&quot; # 新建页面hexo g # 生成页面hexo d # 部署hexo g -d # 生成页面并部署hexo s # 本地预览hexo clean # 清除缓存和已生成的静态文件hexo help # 帮助 10.遇到的问题10.1 Hexo发布到Github丢失readme和CNAME解决方案方法一（推荐）：将需要上传至github的内容放在source文件夹，例如CNAME、README.md、favicon.ico、images等，这样在 hexo d 之后就不会被删除了。 方法二：安装插件实现永久保留。 1npm install hexo-generator-cname --save #安装此插件实现 之后在_config.yml中添加一条 12Plugins: - hexo-generator-cname 需要注意的是：如果是在github上建立的CNAME文件，需要先clone到本地，然后安装插件，再deploy到GitHub Pages上即可。CNAME只允许一个域名地址。 10.2 添加及正确显示README.md文件在source文件夹中新建README.md，再使用hexo g以及hexo d生成并部署后会发现GitHub.io仓库下的README.md文件变成了以.html结尾的文件。 变成html原因是当我们执行hexo g以及hexo d指令时md文件会被转换为html文件并被存放在public文件夹内，最后在提交到github.io项目下。为了让md文件格式不转换为html，可以在根目录下_config.yml配置文件中的skip_render 关键字后面添加README.md，让解释器跳过渲染即可 12skip_render: - README.md #让解释器跳过这些文件渲染","tags":["Hexo"],"categories":["学习笔记"]},{"title":"河南视频网关运维之Windows篇","path":"//blog/202405/河南视频网关运维之Windows篇/","content":"准备工作 1. 加入微盘登录企业微信，收到邀请进入微盘，微盘-共享-视频事业部-运维组，这里是部门运维组整理的所有工作相关文件，可随时上传、下载、更新文件，方便小伙伴们跨平台、跨设备的实时处理工作内容与文件。 2. 获取服务器远程信息视频转码上云网关在河南的各个路公司处，将ssh服务端口映射到公网后方可ssh远程。 远程信息已保存在微盘中：视频事业部-运维-河南-网关-河南网关远程信息表.xlsx。这里推荐使用xshell作为远程连接工具，可酌情保存一份远程配置文件在xshell上随时远程使用。 3. 获取运维的摄像机信息微盘路径：视频事业部-运维-河南-网关-河南${高速公路公司}-${路公司} 其中备份了各个路公司转码网关的已导入的摄像机信息、路由信息和网卡信息，建议另存为一份副本保存到本地，方便上云点位离线的排查工作。 1. 主控程序2. 转码程序3. 标清转码4. 高清转码程序路径：C:\\GDTS保证主控CoderTransferControl.exe和转码TransCodingServer&#123;A..E&#125;.exe的运行守护进程：blrun_control.exe、blrun&#123;A..E&#125;.exe 转码启动的个数需要参考C:\\GDTS\\CoderTransferControl\\config.ini转码摄像机数据：‪C:\\GDTS\\CoderTransferControl\\system.db 启动或重启转码可以参考使用‪C:\\GDTS\\重启转码程序.bat运行bat脚本后程序会单路自动下发推流，打开Dbgview.exe查看已推流个数必备工具 VLC media player：rtsp流地址测试工具 Dbgview.exe：线程信息查看工具 Database4.exe：数据库查看工具 PingInfoView：批量ping工具 Dbgview.exe的使用筛选include填写 ip: 查看推流个数筛选include填写摄像机编号，一般是uuid，查看当前转码所在端口或转码进程注意：当出现该条数据无效，丢弃[摄像机编号]的特殊情况，若为最新版本的transCodingServer，需要与研发及时沟通，并在问题定位后方可重启转码 日志路径‪C:\\GDTS\\TransCodingServer&#123;A..E&#125;\\gdinfo.log日志检索摄像机编号可查看转码信息","tags":["运维"],"categories":["工作笔记"]},{"title":"河南视频网关运维之Linux篇","path":"//blog/202404/河南视频网关运维之Linux篇/","content":"准备工作1. 加入微盘登录企业微信，收到邀请进入微盘，微盘-共享-视频事业部-运维组，这里是部门运维组整理的所有工作相关文件，可随时上传、下载、更新文件，方便小伙伴们跨平台、跨设备的实时处理工作内容与文件。 2. 获取服务器远程信息视频转码上云网关在河南的各个路公司处，将ssh服务端口映射到公网后方可ssh远程。 远程信息已保存在微盘中：视频事业部-运维-河南-网关-河南网关远程信息表.xlsx。这里推荐使用xshell作为远程连接工具，可酌情保存一份远程配置文件在xshell上随时远程使用。 3. 获取运维的摄像机信息微盘路径：视频事业部-运维-河南-网关-河南${高速公路公司}-${路公司} 其中备份了各个路公司转码网关的已导入的摄像机信息、路由信息和网卡信息，建议另存为一份副本保存到本地，方便上云点位离线的排查工作。 1. 主控程序作用：为高速公路视频云联网平台提供对接服务，接受并处理在云平台上的标清下发推流请求和高清点播请求，将请求传递给转码程序处理 文件所在路径：/opt/WebConfig/mastercontrolserver 寻找运行路径：cd &quot;$(pwdx $(pgrep -f &#39;java -jar&#39;) | awk &#39;&#123;print $2&#125;&#39;)&quot;&amp;&amp;ls 运行日志路径：/opt/WebConfig/mastercontrolserver/logs/mastercontrolserver/ 内含三个日志等级：info、warn和error 2. 转码程序作用：拉流、转码、推流 有的转码程序版本将标清和高清的转码工作分开，标清通过GPU专用转码卡转码，高清用CPU进行转码。 2.1. 标清转码作用：调用GPU，为标清视频提供长推流服务 文件所在路径：/opt/runGWS 运行日志同上，做了100份日志文件轮询，当前运行日志的文件是GWS.log 寻找运行路径：cd &quot;$(pwdx $(pgrep -f &#39;./GWS&#39;) | awk &#39;&#123;print $2&#125;&#39;)&quot;&amp;&amp;ls 2.2. 高清转码作用：调用CPU，为高清视频提供点播推流服务 文件所在路径：/opt/runGWS_CPU 运行日志同上，做了100份日志文件轮询，当前运行日志的文件是GWS.log 3. 守护进程主要任务是保证每台网关的三个程序正常运行： 主控程序 mastercontrolserver 转码程序 GWS 高清转码 HDCPU 为避免程序崩溃后转码停止服务，我们设置了三个守护进程来复启动转码服务，从而达到自动化运维的目的。分别是 guard_master.sh，guard_hik.sh 和 guard_cpu.sh 查看进程： 12345678ps -ef | grep -e &#x27;guard&#x27; -e &#x27;java -jar&#x27; -e &#x27;./GWS&#x27; | grep -v greproot@hn-zhongyuan-suixian-spsygw-000001:~# ps -ef | grep -e &#x27;guard&#x27; -e &#x27;java -jar&#x27; -e &#x27;./GWS&#x27; | grep -v greproot 2929 2896 0 2023 pts/2 00:06:41 /bin/sh ./guard_hik.shroot 3105 3081 0 2023 pts/3 01:37:56 /bin/sh ./guard_master.shroot 25108 25068 0 2023 pts/1 00:06:36 /bin/sh ./guard_cpu.shroot 31805 3105 1 12:50 pts/3 00:00:56 java -jar mastercontrolserver-0.0.1.jar --spring.config.location=./application.propertiesroot 31878 2929 99 12:50 pts/2 01:46:01 ./GWS -a 2 -c 0 -p 0 -nl -pl -hbst 1800 4. Tmux终端复用工具守护进程最好使用tmux打开窗口复用终端运行 查看已创建tmux窗口名称： 12345tmux lsroot@hn-zhongyuan-suixian-spsygw-000001:~# tmux lsGWS: 1 windows (created Fri Oct 20 08:05:22 2023) [205x35]HDCPU: 1 windows (created Mon Oct 23 03:40:56 2023) [142x43]MASTER: 1 windows (created Fri Oct 20 08:06:53 2023) [205x35] 创建窗口，执行后自动进入复用终端 1tmux new -s ‘窗口名称’ 如：tmux new -s MASTER 进入终端后运行守护进程 12cd /opt/WebConfig/mastercontrolserver./guard_master.sh 退出窗口：第一步按下 ctrl + b 第二步 按下 d（注意是小写） 进入已创建窗口：tmux attach -t MASTER，或 tmux a -t MASTER 创建窗口并进入 tmux new -s GWS 12cd /opt/runGWS./guard_hik.sh 进入复用窗口 tmux a -t HDCPU 重启主控和GWS，等待出现GWS可在平台下发推流 1234567&#123;cd &quot;$(pwdx$(pgrep -f &#x27;./GWS&#x27;) | awk &#x27;&#123;print $2&#125;&#x27;)&quot;pkill -ef &#x27;java -jar&#x27; &amp;&amp; pkill -ef &#x27;./GWS&#x27;pkill -ef &#x27;java -jar&#x27; &amp;&amp; pkill -ef &#x27;./GWS&#x27;ps -ef | grep -e &#x27;java -jar&#x27; -e &#x27;./GWS&#x27; | grep -v greptail -f GWS.log&#125; 5. 其他5.5 开机自启设置（非常重要）开机自启脚本写在 /etc/rc.local 和 /opt/start_env.sh，由 /etc/rc.local 运行 /opt/start_env.sh 1234567891011121314151617181920212223242526272829root@ubuntu_yudeng:/opt# cat start_env.sh #!/bin/bashsudo timedatectl set-timezone &#x27;Asia/Shanghai&#x27;ifconfig enp7s0 44.129.35.100/24cd /home/GWS-deploy-hik/package/install/Hik/kosh load_ko.shcd /opt/runGWSrm -f GWS.log* error.log nohup.outchmod 777 guard_hik.sh./guard_hik.sh &amp;cd /opt/runGWS_CPUrm -f GWS.log* error.log nohup.outchmod 777 guard_cpu.sh./guard_cpu.sh &amp;cd /opt/runGWS_CPU_CIFrm -f GWS.log* error.log nohup.outchmod 777 guard_cpu_cif.sh./guard_cpu_cif.sh &amp;cd /opt/WebConfig/mastercontrolserverrm -rf *.log mastercontrolserver-0.0.1.out logs/chmod 777 guard_master.sh./guard_master.sh &amp;cd /opt/exit 0 5.6 定时任务可选设置查看已设置定时任务： 1crontab -l 编辑定时任务： 1crontab -e 123456789# 每日凌晨3点50分杀掉转码程序，由守护进程重启程序50 3 * * * &quot;pkill -f &#x27;java -jar&#x27; &amp;&amp; pkill -f &#x27;./GWS&#x27;&quot;# 产生的大日志文件定时清理0 1 * * * truncate -s 0 /opt/runGWS_CPU_CIF/error.log# 定时删除/mydata/corefile/var/lib/apport/coredump/*0 0 */2 * * cd /opt/check_脚本 &amp;&amp; sh check_memory.sh 5.7 批量工具使用小工具：批量ping IP、批量测试拉流地址 微盘下的 tool/ping.tar.gz 和 test_url.tar.gz，建议解压到 /opt 下 批量ping的使用 编辑待测IP写入 ip_hosts，运行 ./ping_duplicate.sh，生成 ping_error.log 和 ping_ok.log test_url 的使用 使用前安装 ffmpeg 1sudo apt-get install ffmpeg -y 编辑待测地址写入 rtsp_urls.txt，后台运行 ./test_resolutions.sh &amp;，输出结果在 output.txt，tail -100f output.txt 滚动查看测试结果 1234root@hunan-changde-spsygw-005002:/opt/test_url# tail -f output.txt Resolution for rtsp://43.0.107.58:554/mgc/realplay/43.0.107.58:655/dac/realplay/97cb725c3e344c75874fd4455275138e/SUB/TCP?streamform=rtp&amp;standard=rtsp:704x576, Codec: H264Resolution for rtsp://43.0.107.58:554/mgc/realplay/43.0.107.58:655/dac/realplay/2d2eebf0cd764841b783e6f26f0444cd/SUB/TCP?streamform=rtp&amp;standard=rtsp:704x576, Codec: hevcFailed to get resolution and codec for rtsp://43.0.107.58:554/mgc/realplay/43.0.107.58:655/dac/realplay/b35b6aa517384aaebc35cca5679e415d/SUB/TCP?streamform=rtp&amp;standard=rtsp GWS.log查看 某一路推流成功 1[2024-04-17 14:33:53.392][INFO]***Push frame success,cam_id = rtsp://43.4.5.2:50554/live/018d5920-5f29-744a-a307-10b4055b0bbc,url: rtmp://push.hngsspy.com:1935/live/018d5920-5f29-744a-a307-10b4055b0bbc?txSecret=d12e651ebdb28451d382d034c283f0d8&amp;txTime=66200017. size: 3943, 0x27 0x64.[func:SendFrame -&gt; RTMPusherEntity.cc:1524] 转码程序拉不到流 1[2024-04-17 14:37:21.732][ERROR]QMCY_FFMPEG_DEMUX::QMCY_FFMPEG_Start Couldn&#x27;t open input stream. cam_id = rtsp://43.4.5.2:50554/live/018d5920-5f29-7ee5-9352-afa29b1869b4[func:QMCY_FFMPEG_Start -&gt; QMCY_FFMPEG_DEMUX.cpp:275] 可能推流失败 1[2024-04-17 14:30:49.032][INFO]Reconnect the rtmp server, go to buffer, cam id = rtsp://43.4.5.2:50554/live/018d5920-5f29-757c-87f5-7b06163af922, url: rtmp://push.hngsspy.com:1935/live/018d5920-5f29-757c-87f5-7b06163af922?txSecret=a44d5105a3002725d8a7b931b41eb077&amp;txTime=6620BD6F.[func:run -&gt; RTMPusherEntity.cc:1742] 查看推流个数 grep &quot;PushCount&quot; GWS.log 或 tail -300f GWS.log | grep &quot;PushCount&quot; 12root@hunan-changde-spsygw-005002:/opt/GWS2.5.3.1# tail -300f GWS.log | grep &quot;PushCount&quot;[2024-04-17 14:36:53.767][WARN]## StreamListSize:191 HeartCount:0 AccessCount:161 TransCount:161 PushCount:161 ## StreamListSize：下发推流指令的路数HeartCount：正在点播的高清路数AccessCount：当前拉流路数TransCount：当前转码路数PushCount：当前推流路数","tags":["运维"],"categories":["工作笔记"]},{"title":"分类","path":"/categories/index.html","content":"这是分类页面"},{"title":"社交","path":"/friends/index.html","content":"这是社交页面"},{"title":"留言板","path":"/message-board/index.html","content":"此处可以畅所欲言"},{"title":"探索","path":"/explore/index.html","content":"这是探索页面"},{"title":"文档","path":"/wiki/index.html","content":"这是wiki文档的index"},{"title":"如何使用文档系统","path":"/wiki/wiki-settings/index.html","content":"Stellar 独创了其它 Hexo 主题所没有的 Wiki 文档系统，可以自动找到一个项目的所有文档分页，生成一个目录树，还可以手动指定顺序、标题、分组，而非依赖文件路径、文件名来排序和显示。 基本流程1/3 创建项目描述文件在 blog/source/_data/ 文件夹中创建一个 wiki 文件夹，在其中放入各个项目的文档。以 Stellar 项目为例，文件名就是项目的 id：blog/source/_data/wiki/hexo-stellar.yml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748name: Stellartitle: Stellar - 每个人的独立博客subtitle: &#x27;每个人的独立博客 | Designed by xaoxuu&#x27;tags: 博客主题icon: /assets/wiki/stellar/icon.svgcover: /assets/wiki/stellar/icon.svgdescription: Stellar 是一个内置文档系统的简约商务风 Hexo 主题，支持丰富的标签和动态数据组件。repo: xaoxuu/hexo-theme-stellarsearch: filter: /wiki/stellar/ placeholder: 在 Stellar 中搜索...leftbar: - tree - timeline_stellar_releases - relatedcomment_title: &#x27;评论区仅供交流，有问题请提 [issue](https://github.com/xaoxuu/hexo-theme-stellar/issues) 反馈。&#x27;comments: service: giscus giscus: data-repo: xaoxuu/hexo-theme-stellar data-mapping: number data-term: 226base_dir: /wiki/stellar/tree: &#x27;快速开始&#x27;: - index - examples - releases &#x27;基本使用&#x27;: - theme-settings - pages - sidebar - tag-plugins - tag-plugins/express - tag-plugins/data - tag-plugins/container - comments &#x27;文档系统&#x27;: - wiki-settings &#x27;进阶玩法&#x27;: - widgets - advanced-settings - notes - fcircle &#x27;技术支持&#x27;: - articles - todo - contributors2/3 设置布局模板和项目名称在此文档项目的 md 文件的 front-matter 部分指定所属的项目 id （即上一步创建的文件名 id.yml）blog/source/wiki/stellar/index.md1234---wiki: hexo-stellar # 这是项目id，对应 /data/wiki/hexo-stellar.ymltitle: 这是分页标题---3/3 将此项目「上架」在 blog/source/_data/ 文件夹中创建一个 wiki.yml 文件，在其中写入需要显示的项目 id：blog/source/_data/wiki.yml12- hexo-stellar- 其它项目这样在项目列表（wiki）页面就可以看到刚刚创建的项目了。 项目分页索引指定项目所在文件夹和目录树： blog/source/_data/wiki/hexo-stellar.yml1234567891011121314151617181920212223242526base_dir: /wiki/stellar/tree: &#x27;快速开始&#x27;: - index # 会被关联到 /wiki/stellar/index.md - examples # 会被关联到 /wiki/stellar/examples.md - releases &#x27;基本使用&#x27;: - theme-settings - pages - sidebar - tag-plugins - tag-plugins/express - tag-plugins/data - tag-plugins/container - comments &#x27;文档系统&#x27;: - wiki-settings &#x27;进阶玩法&#x27;: - widgets - advanced-settings - notes - fcircle &#x27;技术支持&#x27;: - articles - todo - contributors 如果目录树不需要分组，可以这样写： blog/source/_data/wiki/hexo-stellar.yml12345base_dir: /wiki/stellar/tree: - index # 会被关联到 /wiki/stellar/index.md - examples # 会被关联到 /wiki/stellar/examples.md - ... 是否显示封面项目可以显示一个全屏封面，封面占据一个屏幕的高度，会居中依次显示项目的 logo、标题、描述。开启项目封面方法如下： blog/source/_data/wiki/hexo-stellar.yml12cover: /assets/wiki/stellar/icon.svgcoverpage: true # 默认是 true 如果 logo 中已经包含了项目标题，可以这样设置不显示项目标题： blog/source/_data/wiki/hexo-stellar.yml1coverpage: [logo, description] 项目文档标签如果您有很多项目，有些项目是有相关性的，可以相同的 tags 值： blog/source/_data/wiki/hexo-stellar.yml1tags: 博客主题 也可以设置多个 tags 值： blog/source/_data/wiki/hexo-stellar.yml1tags: [博客主题, 开源项目] 项目的 GitHub 仓库信息设置了 repo 值就会在右上角显示项目仓库的相关链接： blog/source/_data/wiki/hexo-stellar.yml1repo: xaoxuu/hexo-theme-stellar 项目评论设置如果希望项目的所有分页使用相同的评论数据，可以在这里覆盖评论配置： blog/source/_data/wiki/hexo-stellar.yml123456comment_title: &#x27;评论区仅供交流，有问题请提 [issue](https://github.com/xaoxuu/hexo-theme-stellar/issues) 反馈。&#x27;comments: giscus: data-repo: xaoxuu/hexo-theme-stellar data-mapping: number data-term: 226 侧边栏组件如果您希望自定义某个项目的侧边栏组件，可以设置 sidebar 值： 可以覆盖组件： blog/source/_data/wiki/hexo-stellar.yml1234leftbar: - tree - timeline_stellar_releases - related todo 在目录树中隐藏某篇文章可以在 front-matter 中不设置 title 标题，或者将 title 改为 seo_title： blog/source/xxx/xxx.md1title: 原本的标题 todo 显示许可协议沿用主题配置文件中设置的： blog/source/_data/wiki/hexo-stellar.yml1license: true 也可以指定协议内容： blog/source/_data/wiki/hexo-stellar.yml1license: &#x27;本文采用 [署名-非商业性使用-相同方式共享 4.0 国际](https://creativecommons.org/licenses/by-nc-sa/4.0/) 许可协议，转载请注明出处。&#x27; 显示分享blog/source/_data/wiki/hexo-stellar.yml1share: true 修改 wiki 路径修改如下配置： blog/_config.stellar.yml123site_tree: wiki: base_dir: wiki # books / products ..."},{"title":"这是分页标题(index.md)","path":"/wiki/stellar/快速开始/1.index.html","content":"这是快速开始的index.md文件"},{"title":"这是分页标题 (releasesmd)","path":"/wiki/stellar/快速开始/3.releases.html","content":"这是快速开始的tree，我在编写releases.md"},{"path":"/wiki/stellar/快速开始/2.examples.html","content":"wiki:hexo-stellartitle:这是快速开始的examples.md这是快速开始，我在编写examples.md"}]